package dr.evomodel.MSSD;

import dr.evolution.tree.NodeRef;
import dr.evomodel.branchratemodel.BranchRateModel;
import dr.evomodel.branchratemodel.DefaultBranchRateModel;
import dr.evomodel.branchratemodel.ScaledTreeLengthRateModel;
import dr.evomodel.tree.TreeModel;
import dr.inference.model.AbstractModel;
import dr.inference.model.Likelihood;
import dr.inference.model.Model;
import dr.inference.model.Parameter;
import dr.math.GammaFunction;
import dr.xml.*;

import java.util.logging.Logger;

/**
 * Package: alsDefaultPrior
 * Description:
 * <p/>
 * <p/>
 * Created by
 * Alexander V. Alekseyenko (alexander.alekseyenko@gmail.com)
 * Date: Mar 14, 2008
 * Time: 12:47:07 PM
 */
public class alsDefaultPrior extends AbstractModel implements Likelihood {
    Parameter deathRate;
    Parameter creationRate;
    Parameter ctmcScale;
    Parameter freqParam;
    TreeModel treeModel;
    BranchRateModel branchRateModel;

    public alsDefaultPrior(Parameter deathRate, Parameter creationRate,
                                    TreeModel treeModel, BranchRateModel branchRateModel, Parameter ctmcScale, Parameter freqParam){
        super(null);
        this.deathRate = deathRate;
        this.creationRate = creationRate;
        this.ctmcScale = ctmcScale;
        this.treeModel = treeModel;
        this.branchRateModel = branchRateModel;
        this.freqParam = freqParam;
    }

    public static final String MODEL_NAME="alsDefaultPrior";
    public static final String DEATHPARAMETER="deathRate";
    public static final String CREATIONPARAMETER = "immigrationRate";
    public static final String SCALEPARAMETER = "ctmcScale";
    public static final String TREEMODEL = "treeModel";
    public static final String FREQPARAMETER = "freqParameter";

    /**
	 * The XML parser
	 */
	public static XMLObjectParser PARSER = new AbstractXMLObjectParser() {

		public String getParserName() { return MODEL_NAME; }

		public Object parseXMLObject(XMLObject xo) throws XMLParseException {

			TreeModel treeModel = (TreeModel)xo.getChild(TreeModel.class);
            BranchRateModel branchRateModel= (BranchRateModel) xo.getChild(BranchRateModel.class);
            if(branchRateModel == null){
                branchRateModel = new DefaultBranchRateModel();
            }
            Parameter creationRate = (Parameter)xo.getElementFirstChild(CREATIONPARAMETER);
            Parameter deathRate = (Parameter)xo.getElementFirstChild(DEATHPARAMETER);
            Parameter ctmcScale = null;
            if(xo.hasChildNamed(SCALEPARAMETER)){
                ctmcScale = (Parameter)xo.getElementFirstChild(SCALEPARAMETER);
            }
            Parameter freqParam = null;
            if(xo.hasChildNamed(FREQPARAMETER)){
                freqParam = (Parameter) xo.getElementFirstChild(FREQPARAMETER);
            }

            Logger.getLogger("dr.evolution").info("\n ---------------------------------\nCreating alsDefaultPrior model.");
            Logger.getLogger("dr.evolution").info("\tIf you publish results using this prior, please reference:");
            Logger.getLogger("dr.evolution").info("\t\t 1. Ferreira and Suchard (in press) for the conditional reference prior on CTMC scale parameter prior;");
            Logger.getLogger("dr.evolution").info("\t\t 2. Alekseyenko, Lee and Suchard (in submision).\n---------------------------------\n");

            return new alsDefaultPrior(deathRate,creationRate,treeModel,branchRateModel,ctmcScale,freqParam);
        }


        //************************************************************************
		// AbstractXMLObjectParser implementation
		//************************************************************************

		public String getParserDescription() {
			return "This element represents the prior for AlternativeSplicingModel.";
		}

		public Class getReturnType() { return Likelihood.class; }

		public XMLSyntaxRule[] getSyntaxRules() { return rules; }

		private XMLSyntaxRule[] rules = new XMLSyntaxRule[] {
            new ElementRule(TreeModel.class),
            new ElementRule(BranchRateModel.class,true),
            new ElementRule(DEATHPARAMETER, new XMLSyntaxRule[] { new ElementRule(Parameter.class) }),
            new ElementRule(CREATIONPARAMETER, new XMLSyntaxRule[] { new ElementRule(Parameter.class) }),
            new ElementRule(SCALEPARAMETER, new XMLSyntaxRule[] { new ElementRule(Parameter.class) },true),
            new ElementRule(FREQPARAMETER, new XMLSyntaxRule[] { new ElementRule(Parameter.class) },true)
        };
	};

    protected void handleModelChangedEvent(Model model, Object object, int index) {
//AUTOGENERATED METHOD IMPLEMENTATION
    }

    /**
     * This method is called whenever a parameter is changed.
     * <p/>
     * It is strongly recommended that the model component sets a "dirty" flag and does no
     * further calculations. Recalculation is typically done when the model component is asked for
     * some information that requires them. This mechanism is 'lazy' so that this method
     * can be safely called multiple times with minimal computational cost.
     */
    protected void handleParameterChangedEvent(Parameter parameter, int index) {
//AUTOGENERATED METHOD IMPLEMENTATION
    }

    /**
     * Additional state information, outside of the sub-model is stored by this call.
     */
    protected void storeState() {
//AUTOGENERATED METHOD IMPLEMENTATION
    }

    /**
     * After this call the model is guaranteed to have returned its extra state information to
     * the values coinciding with the last storeState call.
     * Sub-models are handled automatically and do not need to be considered in this method.
     */
    protected void restoreState() {
//AUTOGENERATED METHOD IMPLEMENTATION
    }

    /**
     * This call specifies that the current state is accept. Most models will not need to do anything.
     * Sub-models are handled automatically and do not need to be considered in this method.
     */
    protected void acceptState() {
//AUTOGENERATED METHOD IMPLEMENTATION
    }

    /**
     * Get the model.
     *
     * @return the model.
     */
    public Model getModel() {
        return this;  //AUTOGENERATED METHOD IMPLEMENTATION
    }

    /**
     * Get the log likelihood.
     *
     * @return the log likelihood.
     */
    public double getLogLikelihood() {
        return calculateLogLikelihood();
    }

    protected double getTotalLength(int L){
        double totalTreeTime = 0.0;
        if(branchRateModel instanceof ScaledTreeLengthRateModel){
            totalTreeTime=((ScaledTreeLengthRateModel)branchRateModel).getTotalLength();
            //System.err.println("Reading total tree length from "+branchRateModel+" length = "+totalTreeTime);
            return totalTreeTime;
        }

        NodeRef currentNode;
        for(int i=0; i<L;++i) {
            currentNode=treeModel.getNode(i);
            double branchRate=branchRateModel.getBranchRate(treeModel,currentNode);
            totalTreeTime+=branchRate * treeModel.getBranchLength(currentNode);
            //System.err.println("Node "+i+" height: "+treeModel.getNodeHeight(currentNode));
        }
        //System.err.println("totalTreeTime: "+totalTreeTime);
        return totalTreeTime;
    }

    public double calculateLogLikelihood() {
        int L = treeModel.getNodeCount();

        double lam=creationRate.getParameterValue(0);
        double mu=deathRate.getParameterValue(0);
        double totalTreeTime=getTotalLength(L);

        if(ctmcScale != null){ //
            double ab=ctmcScale.getParameterValue(0);
            return GammaFunction.lnGamma(L)-Math.log(mu*lam)-(L-1)*Math.log(totalTreeTime)-0.5*Math.log(ab)-ab*totalTreeTime;
        }else{ // No Markov Chain for this model
            return GammaFunction.lnGamma(L)-Math.log(mu*lam)-(L-1)*Math.log(totalTreeTime);
        }
    }

    /**
     * Forces a complete recalculation of the likelihood next time getLikelihood is called
     */
    public void makeDirty() {
//AUTOGENERATED METHOD IMPLEMENTATION
    }


    public final dr.inference.loggers.LogColumn[] getColumns() {
        return new dr.inference.loggers.LogColumn[] {
                new LikelihoodColumn(getId())
        };
    }

    private final class LikelihoodColumn extends dr.inference.loggers.NumberColumn {
        public LikelihoodColumn(String label) { super(label); }
        public double getDoubleValue() { return getLogLikelihood(); }
    }
}
